//**********************************************************************
//
// This file was generated by abvkit at 2016-08-26 18:28:18 GMT
// from grammar '/home/tondy/dev/abvkit/grammars/hscript.peg'.
//
//**********************************************************************

package ;

import ParserBase.Source;
import ParserBase.Cache;

class HscriptParser extends ParserBase{

  public var sem(default,null):HscriptSemantics;
  public var version(default,never) = 20160826.182818;
  public var kind(default,never) = "memo";
  public var grammar(default,never) = "hscript.peg";
  
  public function new()
  {
    super();
    sem = new HscriptSemantics();
    sem.rule = this;
    initCache();
  }
  
  public override function setTrace(s:String)
  {
    super.setTrace(s);
    sem.trc = s;
  }
  //-------------------------------------------------------------------
  // Run the parser
  //-------------------------------------------------------------------
  public function parse(src:Source)
  {
    init(src);
    sem.init();
    var result = Compilation();
    closeParser(result);
    return result;
  }
  
  //**********************************************************************
  //
  // Parsing procedures
  //
  //**********************************************************************
  //*********************************************************************
  // Compilation = Spacing CompilationUnit EOT ;
  //*********************************************************************
  function Compilation()
  {
    if (saved(_Compilation_)) return reuse();
    Spacing();
    CompilationUnit();
    if (!EOT()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // EOT = !_ ;
  //*********************************************************************
  function EOT()
  {
    if (saved(_EOT_)) return reuse();
    if (!aheadNot()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // Spacing = ([ \t\r\n0]+ / "/*" _*+ "*/" / "//" _*+ [\r\n])* ;
  //*********************************************************************
  function Spacing()
  {
    if (saved(_Spacing_)) return reuse();
    while (Spacing_0()){ };
    return accept();
  }
  
  //-------------------------------------------------------------------
  // Spacing_0 = [ \t\r\n0]+ / "/*" _*+ "*/" / "//" _*+ [\r\n]
  //-------------------------------------------------------------------
  function Spacing_0()
  {
    if (savedInner(_Spacing_0_)) return reuseInner();
    if (Spacing_1()) return acceptInner();
    if (Spacing_2()) return acceptInner();
    if (Spacing_3()) return acceptInner();
    return rejectInner();
  }
  
  //-------------------------------------------------------------------
  // Spacing_1 = [ \t\r\n0]+
  //-------------------------------------------------------------------
  function Spacing_1()
  {
    if (savedInner(_Spacing_1_)) return reuseInner();
    if (!nextIn(" \t\r\n0")) return rejectInner();
    while (nextIn(" \t\r\n0")){ };
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // Spacing_2 = "/*" _*+ "*/"
  //-------------------------------------------------------------------
  function Spacing_2()
  {
    if (savedInner(_Spacing_2_)) return reuseInner();
    if (!next("/*")) return rejectInner();
    while (!next("*/")){
      if (!next()) return rejectInner();
    }
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // Spacing_3 = "//" _*+ [\r\n]
  //-------------------------------------------------------------------
  function Spacing_3()
  {
    if (savedInner(_Spacing_3_)) return reuseInner();
    if (!next("//")) return rejectInner();
    while (!nextIn("\r\n")){
      if (!next()) return rejectInner();
    }
    return acceptInner();
  }
  
  //*********************************************************************
  // Identifier = !Keyword Letter LetterOrDigit* Spacing ;
  //*********************************************************************
  function Identifier()
  {
    if (saved(_Identifier_)) return reuse();
    if (!Identifier_0()) return reject();
    if (!Letter()) return reject();
    while (LetterOrDigit()){ };
    Spacing();
    return accept();
  }
  
  //-------------------------------------------------------------------
  // Identifier_0 = !Keyword
  //-------------------------------------------------------------------
  function Identifier_0()
  {
    if (savedInner(_Identifier_0_)) return reusePred();
    if (Keyword()) return rejectPred();
    return acceptPred();
  }
  
  //*********************************************************************
  // Letter = [a-z] / [A-Z] / [_$] ;
  //*********************************************************************
  function Letter()
  {
    if (saved(_Letter_)) return reuse();
    if (nextIn('a','z')) return accept();
    if (nextIn('A','Z')) return accept();
    if (nextIn("_$")) return accept();
    return reject();
  }
  
  //*********************************************************************
  // LetterOrDigit = [a-z] / [A-Z] / [0-9] / [_$] ;
  //*********************************************************************
  function LetterOrDigit()
  {
    if (saved(_LetterOrDigit_)) return reuse();
    if (nextIn('a','z')) return accept();
    if (nextIn('A','Z')) return accept();
    if (nextIn('0','9')) return accept();
    if (nextIn("_$")) return accept();
    return reject();
  }
  
  //*********************************************************************
  // Digit = [0-9] / [_$] ;
  //*********************************************************************
  function Digit()
  {
    if (saved(_Digit_)) return reuse();
    if (nextIn('0','9')) return accept();
    if (nextIn("_$")) return accept();
    return reject();
  }
  
  //*********************************************************************
  // Keyword = ("break" / "case" / "catch" / "continue" / "default" /
  // "do" / "else" / "false" / "for" / "function" / "if" / "in" /
  // "new" / "return" / "switch" / "throw" / "true" / "try" / "var" /
  // "while") !LetterOrDigit ;
  //*********************************************************************
  function Keyword()
  {
    if (saved(_Keyword_)) return reuse();
    if (!next("break")
     && !next("case")
     && !next("catch")
     && !next("continue")
     && !next("default")
     && !next("do")
     && !next("else")
     && !next("false")
     && !next("for")
     && !next("function")
     && !next("if")
     && !next("in")
     && !next("new")
     && !next("return")
     && !next("switch")
     && !next("throw")
     && !next("true")
     && !next("try")
     && !next("var")
     && !next("while")
     ) return reject();
    if (!Keyword_0()) return reject();
    return accept();
  }
  
  //-------------------------------------------------------------------
  // Keyword_0 = !LetterOrDigit
  //-------------------------------------------------------------------
  function Keyword_0()
  {
    if (savedInner(_Keyword_0_)) return reusePred();
    if (LetterOrDigit()) return rejectPred();
    return acceptPred();
  }
  
  //*********************************************************************
  // FUNCTION = "function" !LetterOrDigit Spacing ;
  //*********************************************************************
  function FUNCTION()
  {
    if (saved(_FUNCTION_)) return reuse();
    if (!next("function")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // VAR = "var" !LetterOrDigit Spacing ;
  //*********************************************************************
  function VAR()
  {
    if (saved(_VAR_)) return reuse();
    if (!next("var")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // BOOL = "Bool" !LetterOrDigit Spacing ;
  //*********************************************************************
  function BOOL()
  {
    if (saved(_BOOL_)) return reuse();
    if (!next("Bool")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // BREAK = "break" !LetterOrDigit Spacing ;
  //*********************************************************************
  function BREAK()
  {
    if (saved(_BREAK_)) return reuse();
    if (!next("break")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // CASE = "case" !LetterOrDigit Spacing ;
  //*********************************************************************
  function CASE()
  {
    if (saved(_CASE_)) return reuse();
    if (!next("case")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // CATCH = "catch" !LetterOrDigit Spacing ;
  //*********************************************************************
  function CATCH()
  {
    if (saved(_CATCH_)) return reuse();
    if (!next("catch")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // CONTINUE = "continue" !LetterOrDigit Spacing ;
  //*********************************************************************
  function CONTINUE()
  {
    if (saved(_CONTINUE_)) return reuse();
    if (!next("continue")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // DEFAULT = "default" !LetterOrDigit Spacing ;
  //*********************************************************************
  function DEFAULT()
  {
    if (saved(_DEFAULT_)) return reuse();
    if (!next("default")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // DO = "do" !LetterOrDigit Spacing ;
  //*********************************************************************
  function DO()
  {
    if (saved(_DO_)) return reuse();
    if (!next("do")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // ELSE = "else" !LetterOrDigit Spacing ;
  //*********************************************************************
  function ELSE()
  {
    if (saved(_ELSE_)) return reuse();
    if (!next("else")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // FALSE = "false" !LetterOrDigit Spacing ;
  //*********************************************************************
  function FALSE()
  {
    if (saved(_FALSE_)) return reuse();
    if (!next("false")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // FLOAT = "Float" !LetterOrDigit Spacing ;
  //*********************************************************************
  function FLOAT()
  {
    if (saved(_FLOAT_)) return reuse();
    if (!next("Float")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // ARRAY = "Array" !LetterOrDigit Spacing ;
  //*********************************************************************
  function ARRAY()
  {
    if (saved(_ARRAY_)) return reuse();
    if (!next("Array")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // FOR = "for" !LetterOrDigit Spacing ;
  //*********************************************************************
  function FOR()
  {
    if (saved(_FOR_)) return reuse();
    if (!next("for")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // IN = "in" !LetterOrDigit Spacing ;
  //*********************************************************************
  function IN()
  {
    if (saved(_IN_)) return reuse();
    if (!next("in")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // IF = "if" !LetterOrDigit Spacing ;
  //*********************************************************************
  function IF()
  {
    if (saved(_IF_)) return reuse();
    if (!next("if")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // INT = "Int" !LetterOrDigit Spacing ;
  //*********************************************************************
  function INT()
  {
    if (saved(_INT_)) return reuse();
    if (!next("Int")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // MAP = "Map" !LetterOrDigit Spacing ;
  //*********************************************************************
  function MAP()
  {
    if (saved(_MAP_)) return reuse();
    if (!next("Map")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // NEW = "new" !LetterOrDigit Spacing ;
  //*********************************************************************
  function NEW()
  {
    if (saved(_NEW_)) return reuse();
    if (!next("new")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // NULL = "Null" !LetterOrDigit Spacing ;
  //*********************************************************************
  function NULL()
  {
    if (saved(_NULL_)) return reuse();
    if (!next("Null")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // RETURN = "return" !LetterOrDigit Spacing ;
  //*********************************************************************
  function RETURN()
  {
    if (saved(_RETURN_)) return reuse();
    if (!next("return")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // SWITCH = "switch" !LetterOrDigit Spacing ;
  //*********************************************************************
  function SWITCH()
  {
    if (saved(_SWITCH_)) return reuse();
    if (!next("switch")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // STRING = "String" !LetterOrDigit Spacing ;
  //*********************************************************************
  function STRING()
  {
    if (saved(_STRING_)) return reuse();
    if (!next("String")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // THROW = "throw" !LetterOrDigit Spacing ;
  //*********************************************************************
  function THROW()
  {
    if (saved(_THROW_)) return reuse();
    if (!next("throw")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // TRUE = "true" !LetterOrDigit Spacing ;
  //*********************************************************************
  function TRUE()
  {
    if (saved(_TRUE_)) return reuse();
    if (!next("true")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // TRY = "try" !LetterOrDigit Spacing ;
  //*********************************************************************
  function TRY()
  {
    if (saved(_TRY_)) return reuse();
    if (!next("try")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // VOID = "Void" !LetterOrDigit Spacing ;
  //*********************************************************************
  function VOID()
  {
    if (saved(_VOID_)) return reuse();
    if (!next("Void")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // WHILE = "while" !LetterOrDigit Spacing ;
  //*********************************************************************
  function WHILE()
  {
    if (saved(_WHILE_)) return reuse();
    if (!next("while")) return reject();
    if (!Keyword_0()) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // Literal = FloatLiteral / IntegerLiteral / BooleanLiteral /
  // CharLiteral / StringLiteral / NullLiteral ;
  //*********************************************************************
  function Literal()
  {
    if (saved(_Literal_)) return reuse();
    if (FloatLiteral()) return accept();
    if (IntegerLiteral()) return accept();
    if (BooleanLiteral()) return accept();
    if (CharLiteral()) return accept();
    if (StringLiteral()) return accept();
    if (NullLiteral()) return accept();
    return reject();
  }
  
  //*********************************************************************
  // IntegerLiteral = (HexNumeral / BinaryNumeral / OctalNumeral /
  // DecimalNumeral) [lL]? Spacing ;
  //*********************************************************************
  function IntegerLiteral()
  {
    if (saved(_IntegerLiteral_)) return reuse();
    if (!HexNumeral()
     && !BinaryNumeral()
     && !OctalNumeral()
     && !DecimalNumeral()
     ) return reject();
    nextIn("lL");
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // DecimalNumeral = "0" / [1-9] ([_]* [0-9])* ;
  //*********************************************************************
  function DecimalNumeral()
  {
    if (saved(_DecimalNumeral_)) return reuse();
    if (next('0')) return accept();
    if (DecimalNumeral_0()) return accept();
    return reject();
  }
  
  //-------------------------------------------------------------------
  // DecimalNumeral_0 = [1-9] ([_]* [0-9])*
  //-------------------------------------------------------------------
  function DecimalNumeral_0()
  {
    if (savedInner(_DecimalNumeral_0_)) return reuseInner();
    if (!nextIn('1','9')) return rejectInner();
    while (DecimalNumeral_1()){ };
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // DecimalNumeral_1 = [_]* [0-9]
  //-------------------------------------------------------------------
  function DecimalNumeral_1()
  {
    if (savedInner(_DecimalNumeral_1_)) return reuseInner();
    while (next('_')){ };
    if (!nextIn('0','9')) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // HexNumeral = ("0x" / "0X") HexDigits ;
  //*********************************************************************
  function HexNumeral()
  {
    if (saved(_HexNumeral_)) return reuse();
    if (!next("0x")
     && !next("0X")
     ) return reject();
    if (!HexDigits()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // OctalNumeral = "0" ([_]* [0-7])+ ;
  //*********************************************************************
  function OctalNumeral()
  {
    if (saved(_OctalNumeral_)) return reuse();
    if (!next('0')) return reject();
    if (!OctalNumeral_0()) return reject();
    while (OctalNumeral_0()){ };
    return accept();
  }
  
  //-------------------------------------------------------------------
  // OctalNumeral_0 = [_]* [0-7]
  //-------------------------------------------------------------------
  function OctalNumeral_0()
  {
    if (savedInner(_OctalNumeral_0_)) return reuseInner();
    while (next('_')){ };
    if (!nextIn('0','7')) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // BinaryNumeral = ("0b" / "0B") [01] ([_]* [01])* ;
  //*********************************************************************
  function BinaryNumeral()
  {
    if (saved(_BinaryNumeral_)) return reuse();
    if (!next("0b")
     && !next("0B")
     ) return reject();
    if (!nextIn("01")) return reject();
    while (BinaryNumeral_0()){ };
    return accept();
  }
  
  //-------------------------------------------------------------------
  // BinaryNumeral_0 = [_]* [01]
  //-------------------------------------------------------------------
  function BinaryNumeral_0()
  {
    if (savedInner(_BinaryNumeral_0_)) return reuseInner();
    while (next('_')){ };
    if (!nextIn("01")) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // FloatLiteral = (HexadecimalFloatingPointLiteral /
  // DecimalFloatingPointLiteral) Spacing ;
  //*********************************************************************
  function FloatLiteral()
  {
    if (saved(_FloatLiteral_)) return reuse();
    if (!HexadecimalFloatingPointLiteral()
     && !DecimalFloatingPointLiteral()
     ) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // DecimalFloatingPointLiteral = Digits "." Digits? Exponent? [fFdD]?
  // / "." Digits Exponent? [fFdD]? / Digits Exponent [fFdD]? / Digits
  // Exponent? [fFdD] ;
  //*********************************************************************
  function DecimalFloatingPointLiteral()
  {
    if (saved(_DecimalFloatingPointLiteral_)) return reuse();
    if (DecimalFloatingPointLiteral_0()) return accept();
    if (DecimalFloatingPointLiteral_1()) return accept();
    if (DecimalFloatingPointLiteral_2()) return accept();
    if (DecimalFloatingPointLiteral_3()) return accept();
    return reject();
  }
  
  //-------------------------------------------------------------------
  // DecimalFloatingPointLiteral_0 = Digits "." Digits? Exponent?
  // [fFdD]?
  //-------------------------------------------------------------------
  function DecimalFloatingPointLiteral_0()
  {
    if (savedInner(_DecimalFloatingPointLiteral_0_)) return reuseInner();
    if (!Digits()) return rejectInner();
    if (!next('.')) return rejectInner();
    Digits();
    Exponent();
    nextIn("fFdD");
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // DecimalFloatingPointLiteral_1 = "." Digits Exponent? [fFdD]?
  //-------------------------------------------------------------------
  function DecimalFloatingPointLiteral_1()
  {
    if (savedInner(_DecimalFloatingPointLiteral_1_)) return reuseInner();
    if (!next('.')) return rejectInner();
    if (!Digits()) return rejectInner();
    Exponent();
    nextIn("fFdD");
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // DecimalFloatingPointLiteral_2 = Digits Exponent [fFdD]?
  //-------------------------------------------------------------------
  function DecimalFloatingPointLiteral_2()
  {
    if (savedInner(_DecimalFloatingPointLiteral_2_)) return reuseInner();
    if (!Digits()) return rejectInner();
    if (!Exponent()) return rejectInner();
    nextIn("fFdD");
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // DecimalFloatingPointLiteral_3 = Digits Exponent? [fFdD]
  //-------------------------------------------------------------------
  function DecimalFloatingPointLiteral_3()
  {
    if (savedInner(_DecimalFloatingPointLiteral_3_)) return reuseInner();
    if (!Digits()) return rejectInner();
    Exponent();
    if (!nextIn("fFdD")) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // Exponent = [eE] [+-]? Digits ;
  //*********************************************************************
  function Exponent()
  {
    if (saved(_Exponent_)) return reuse();
    if (!nextIn("eE")) return reject();
    nextIn("+-");
    if (!Digits()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // HexadecimalFloatingPointLiteral = HexSignificand BinaryExponent
  // [fFdD]? ;
  //*********************************************************************
  function HexadecimalFloatingPointLiteral()
  {
    if (saved(_HexadecimalFloatingPointLiteral_)) return reuse();
    if (!HexSignificand()) return reject();
    if (!BinaryExponent()) return reject();
    nextIn("fFdD");
    return accept();
  }
  
  //*********************************************************************
  // HexSignificand = ("0x" / "0X") HexDigits? "." HexDigits /
  // HexNumeral "."? ;
  //*********************************************************************
  function HexSignificand()
  {
    if (saved(_HexSignificand_)) return reuse();
    if (HexSignificand_0()) return accept();
    if (HexSignificand_1()) return accept();
    return reject();
  }
  
  //-------------------------------------------------------------------
  // HexSignificand_0 = ("0x" / "0X") HexDigits? "." HexDigits
  //-------------------------------------------------------------------
  function HexSignificand_0()
  {
    if (savedInner(_HexSignificand_0_)) return reuseInner();
    if (!next("0x")
     && !next("0X")
     ) return rejectInner();
    HexDigits();
    if (!next('.')) return rejectInner();
    if (!HexDigits()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // HexSignificand_1 = HexNumeral "."?
  //-------------------------------------------------------------------
  function HexSignificand_1()
  {
    if (savedInner(_HexSignificand_1_)) return reuseInner();
    if (!HexNumeral()) return rejectInner();
    next('.');
    return acceptInner();
  }
  
  //*********************************************************************
  // HexDigits = HexDigit ([_]* HexDigit)* ;
  //*********************************************************************
  function HexDigits()
  {
    if (saved(_HexDigits_)) return reuse();
    if (!HexDigit()) return reject();
    while (HexDigits_0()){ };
    return accept();
  }
  
  //-------------------------------------------------------------------
  // HexDigits_0 = [_]* HexDigit
  //-------------------------------------------------------------------
  function HexDigits_0()
  {
    if (savedInner(_HexDigits_0_)) return reuseInner();
    while (next('_')){ };
    if (!HexDigit()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // HexDigit = [a-f] / [A-F] / [0-9] ;
  //*********************************************************************
  function HexDigit()
  {
    if (saved(_HexDigit_)) return reuse();
    if (nextIn('a','f')) return accept();
    if (nextIn('A','F')) return accept();
    if (nextIn('0','9')) return accept();
    return reject();
  }
  
  //*********************************************************************
  // BinaryExponent = [pP] [+-]? Digits ;
  //*********************************************************************
  function BinaryExponent()
  {
    if (saved(_BinaryExponent_)) return reuse();
    if (!nextIn("pP")) return reject();
    nextIn("+-");
    if (!Digits()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // Digits = [0-9] ([_]* [0-9])* ;
  //*********************************************************************
  function Digits()
  {
    if (saved(_Digits_)) return reuse();
    if (!nextIn('0','9')) return reject();
    while (DecimalNumeral_1()){ };
    return accept();
  }
  
  //*********************************************************************
  // BooleanLiteral = TRUE / FALSE ;
  //*********************************************************************
  function BooleanLiteral()
  {
    if (saved(_BooleanLiteral_)) return reuse();
    if (TRUE()) return accept();
    if (FALSE()) return accept();
    return reject();
  }
  
  //*********************************************************************
  // CharLiteral = "'" (Escape / !['\\n\r] _) "'" Spacing ;
  //*********************************************************************
  function CharLiteral()
  {
    if (saved(_CharLiteral_)) return reuse();
    if (!next('\'')) return reject();
    if (!Escape()
     && !CharLiteral_0()
     ) return reject();
    if (!next('\'')) return reject();
    Spacing();
    return accept();
  }
  
  //-------------------------------------------------------------------
  // CharLiteral_0 = !['\\n\r] _
  //-------------------------------------------------------------------
  function CharLiteral_0()
  {
    if (savedInner(_CharLiteral_0_)) return reuseInner();
    if (!aheadNotIn("'\\\n\r")) return rejectInner();
    if (!next()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // StringLiteral = """ (Escape / !["\\n\r] _)* """ Spacing ;
  //*********************************************************************
  function StringLiteral()
  {
    if (saved(_StringLiteral_)) return reuse();
    if (!next('"')) return reject();
    while (StringLiteral_0()){ };
    if (!next('"')) return reject();
    Spacing();
    return accept();
  }
  
  //-------------------------------------------------------------------
  // StringLiteral_0 = Escape / !["\\n\r] _
  //-------------------------------------------------------------------
  function StringLiteral_0()
  {
    if (savedInner(_StringLiteral_0_)) return reuseInner();
    if (Escape()) return acceptInner();
    if (StringLiteral_1()) return acceptInner();
    return rejectInner();
  }
  
  //-------------------------------------------------------------------
  // StringLiteral_1 = !["\\n\r] _
  //-------------------------------------------------------------------
  function StringLiteral_1()
  {
    if (savedInner(_StringLiteral_1_)) return reuseInner();
    if (!aheadNotIn("\"\\\n\r")) return rejectInner();
    if (!next()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // Escape = "\" ([btnfr"'\] / OctalEscape / UnicodeEscape) ;
  //*********************************************************************
  function Escape()
  {
    if (saved(_Escape_)) return reuse();
    if (!next('\\')) return reject();
    if (!nextIn("btnfr\"'\\")
     && !OctalEscape()
     && !UnicodeEscape()
     ) return reject();
    return accept();
  }
  
  //*********************************************************************
  // OctalEscape = [0-3] [0-7] [0-7] / [0-7] [0-7] / [0-7] ;
  //*********************************************************************
  function OctalEscape()
  {
    if (saved(_OctalEscape_)) return reuse();
    if (OctalEscape_0()) return accept();
    if (OctalEscape_1()) return accept();
    if (nextIn('0','7')) return accept();
    return reject();
  }
  
  //-------------------------------------------------------------------
  // OctalEscape_0 = [0-3] [0-7] [0-7]
  //-------------------------------------------------------------------
  function OctalEscape_0()
  {
    if (savedInner(_OctalEscape_0_)) return reuseInner();
    if (!nextIn('0','3')) return rejectInner();
    if (!nextIn('0','7')) return rejectInner();
    if (!nextIn('0','7')) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // OctalEscape_1 = [0-7] [0-7]
  //-------------------------------------------------------------------
  function OctalEscape_1()
  {
    if (savedInner(_OctalEscape_1_)) return reuseInner();
    if (!nextIn('0','7')) return rejectInner();
    if (!nextIn('0','7')) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // UnicodeEscape = "u"+ HexDigit HexDigit HexDigit HexDigit ;
  //*********************************************************************
  function UnicodeEscape()
  {
    if (saved(_UnicodeEscape_)) return reuse();
    if (!next('u')) return reject();
    while (next('u')){ };
    if (!HexDigit()) return reject();
    if (!HexDigit()) return reject();
    if (!HexDigit()) return reject();
    if (!HexDigit()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // NullLiteral = NULL ;
  //*********************************************************************
  function NullLiteral()
  {
    if (saved(_NullLiteral_)) return reuse();
    if (!NULL()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // COLON = ":" Spacing ;
  //*********************************************************************
  function COLON()
  {
    if (saved(_COLON_)) return reuse();
    if (!next(':')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // COMMA = "," Spacing ;
  //*********************************************************************
  function COMMA()
  {
    if (saved(_COMMA_)) return reuse();
    if (!next(',')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // DOT = "." Spacing ;
  //*********************************************************************
  function DOT()
  {
    if (saved(_DOT_)) return reuse();
    if (!next('.')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // ELLIPSIS = "..." Spacing ;
  //*********************************************************************
  function ELLIPSIS()
  {
    if (saved(_ELLIPSIS_)) return reuse();
    if (!next("...")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // LPAR = "(" Spacing ;
  //*********************************************************************
  function LPAR()
  {
    if (saved(_LPAR_)) return reuse();
    if (!next('(')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // LBRK = "[" Spacing ;
  //*********************************************************************
  function LBRK()
  {
    if (saved(_LBRK_)) return reuse();
    if (!next('[')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // RBRK = "]" Spacing ;
  //*********************************************************************
  function RBRK()
  {
    if (saved(_RBRK_)) return reuse();
    if (!next(']')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // RPAR = ")" Spacing ;
  //*********************************************************************
  function RPAR()
  {
    if (saved(_RPAR_)) return reuse();
    if (!next(')')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // LWING = "{" Spacing ;
  //*********************************************************************
  function LWING()
  {
    if (saved(_LWING_)) return reuse();
    if (!next('{')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // RWING = "}" Spacing ;
  //*********************************************************************
  function RWING()
  {
    if (saved(_RWING_)) return reuse();
    if (!next('}')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // SEMI = ";" Spacing ;
  //*********************************************************************
  function SEMI()
  {
    if (saved(_SEMI_)) return reuse();
    if (!next(';')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // LT = "<" Spacing ;
  //*********************************************************************
  function LT()
  {
    if (saved(_LT_)) return reuse();
    if (!next('<')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // GT = ">" Spacing ;
  //*********************************************************************
  function GT()
  {
    if (saved(_GT_)) return reuse();
    if (!next('>')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // AND = "&" ![=&] Spacing ;
  //*********************************************************************
  function AND()
  {
    if (saved(_AND_)) return reuse();
    if (!next('&')) return reject();
    if (!aheadNotIn("=&")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // ANDAND = "&&" Spacing ;
  //*********************************************************************
  function ANDAND()
  {
    if (saved(_ANDAND_)) return reuse();
    if (!next("&&")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // ANDEQU = "&=" Spacing ;
  //*********************************************************************
  function ANDEQU()
  {
    if (saved(_ANDEQU_)) return reuse();
    if (!next("&=")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // BANG = "!" ![=] Spacing ;
  //*********************************************************************
  function BANG()
  {
    if (saved(_BANG_)) return reuse();
    if (!next('!')) return reject();
    if (!aheadNot('=')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // DEC = "--" Spacing ;
  //*********************************************************************
  function DEC()
  {
    if (saved(_DEC_)) return reuse();
    if (!next("--")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // DIV = "/" ![=] Spacing ;
  //*********************************************************************
  function DIV()
  {
    if (saved(_DIV_)) return reuse();
    if (!next('/')) return reject();
    if (!aheadNot('=')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // DIVEQU = "/=" Spacing ;
  //*********************************************************************
  function DIVEQU()
  {
    if (saved(_DIVEQU_)) return reuse();
    if (!next("/=")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // EQU = "=" ![=] Spacing ;
  //*********************************************************************
  function EQU()
  {
    if (saved(_EQU_)) return reuse();
    if (!next('=')) return reject();
    if (!aheadNot('=')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // EQUAL = "==" Spacing ;
  //*********************************************************************
  function EQUAL()
  {
    if (saved(_EQUAL_)) return reuse();
    if (!next("==")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // GE = ">=" Spacing ;
  //*********************************************************************
  function GE()
  {
    if (saved(_GE_)) return reuse();
    if (!next(">=")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // HAT = "^" ![=] Spacing ;
  //*********************************************************************
  function HAT()
  {
    if (saved(_HAT_)) return reuse();
    if (!next('^')) return reject();
    if (!aheadNot('=')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // INC = "++" Spacing ;
  //*********************************************************************
  function INC()
  {
    if (saved(_INC_)) return reuse();
    if (!next("++")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // LE = "<=" Spacing ;
  //*********************************************************************
  function LE()
  {
    if (saved(_LE_)) return reuse();
    if (!next("<=")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // MINUS = "-" ![=->] Spacing ;
  //*********************************************************************
  function MINUS()
  {
    if (saved(_MINUS_)) return reuse();
    if (!next('-')) return reject();
    if (!aheadNotIn("=->")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // MINUSEQU = "-=" Spacing ;
  //*********************************************************************
  function MINUSEQU()
  {
    if (saved(_MINUSEQU_)) return reuse();
    if (!next("-=")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // MOD = "%" ![=] Spacing ;
  //*********************************************************************
  function MOD()
  {
    if (saved(_MOD_)) return reuse();
    if (!next('%')) return reject();
    if (!aheadNot('=')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // NOTEQUAL = "!=" Spacing ;
  //*********************************************************************
  function NOTEQUAL()
  {
    if (saved(_NOTEQUAL_)) return reuse();
    if (!next("!=")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // OR = "|" ![=|] Spacing ;
  //*********************************************************************
  function OR()
  {
    if (saved(_OR_)) return reuse();
    if (!next('|')) return reject();
    if (!aheadNotIn("=|")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // OREQU = "|=" Spacing ;
  //*********************************************************************
  function OREQU()
  {
    if (saved(_OREQU_)) return reuse();
    if (!next("|=")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // OROR = "||" Spacing ;
  //*********************************************************************
  function OROR()
  {
    if (saved(_OROR_)) return reuse();
    if (!next("||")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // PLUS = "+" ![=+] Spacing ;
  //*********************************************************************
  function PLUS()
  {
    if (saved(_PLUS_)) return reuse();
    if (!next('+')) return reject();
    if (!aheadNotIn("=+")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // PLUSEQU = "+=" Spacing ;
  //*********************************************************************
  function PLUSEQU()
  {
    if (saved(_PLUSEQU_)) return reuse();
    if (!next("+=")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // QUERY = "?" Spacing ;
  //*********************************************************************
  function QUERY()
  {
    if (saved(_QUERY_)) return reuse();
    if (!next('?')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // SL = "<<" ![=] Spacing ;
  //*********************************************************************
  function SL()
  {
    if (saved(_SL_)) return reuse();
    if (!next("<<")) return reject();
    if (!aheadNot('=')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // SR = ">>" ![=>] Spacing ;
  //*********************************************************************
  function SR()
  {
    if (saved(_SR_)) return reuse();
    if (!next(">>")) return reject();
    if (!aheadNotIn("=>")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // STAR = "*" ![=] Spacing ;
  //*********************************************************************
  function STAR()
  {
    if (saved(_STAR_)) return reuse();
    if (!next('*')) return reject();
    if (!aheadNot('=')) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // STAREQU = "*=" Spacing ;
  //*********************************************************************
  function STAREQU()
  {
    if (saved(_STAREQU_)) return reuse();
    if (!next("*=")) return reject();
    Spacing();
    return accept();
  }
  
  //*********************************************************************
  // BasicType = INT / FLOAT / BOOL / STRING ;
  //*********************************************************************
  function BasicType()
  {
    if (saved(_BasicType_)) return reuse();
    if (INT()) return accept();
    if (FLOAT()) return accept();
    if (BOOL()) return accept();
    if (STRING()) return accept();
    return reject();
  }
  
  //*********************************************************************
  // ReferenceType = ArrayType / MapType ;
  //*********************************************************************
  function ReferenceType()
  {
    if (saved(_ReferenceType_)) return reuse();
    if (ArrayType()) return accept();
    if (MapType()) return accept();
    return reject();
  }
  
  //*********************************************************************
  // Type = BasicType / ReferenceType ;
  //*********************************************************************
  function Type()
  {
    if (saved(_Type_)) return reuse();
    if (BasicType()) return accept();
    if (ReferenceType()) return accept();
    return reject();
  }
  
  //*********************************************************************
  // ArrayType = ARRAY LT (BasicType / ClassType) GT ;
  //*********************************************************************
  function ArrayType()
  {
    if (saved(_ArrayType_)) return reuse();
    if (!ARRAY()) return reject();
    if (!LT()) return reject();
    if (!BasicType()
     && !ClassType()
     ) return reject();
    if (!GT()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // MapType = MAP LT (BasicType / ClassType) GT ;
  //*********************************************************************
  function MapType()
  {
    if (saved(_MapType_)) return reuse();
    if (!MAP()) return reject();
    if (!LT()) return reject();
    if (!BasicType()
     && !ClassType()
     ) return reject();
    if (!GT()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // ClassType = Identifier (DOT Identifier)* ;
  //*********************************************************************
  function ClassType()
  {
    if (saved(_ClassType_)) return reuse();
    if (!Identifier()) return reject();
    while (ClassType_0()){ };
    return accept();
  }
  
  //-------------------------------------------------------------------
  // ClassType_0 = DOT Identifier
  //-------------------------------------------------------------------
  function ClassType_0()
  {
    if (savedInner(_ClassType_0_)) return reuseInner();
    if (!DOT()) return rejectInner();
    if (!Identifier()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // TypeVariable = Identifier ;
  //*********************************************************************
  function TypeVariable()
  {
    if (saved(_TypeVariable_)) return reuse();
    if (!Identifier()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // Dim = LBRK RBRK ;
  //*********************************************************************
  function Dim()
  {
    if (saved(_Dim_)) return reuse();
    if (!LBRK()) return reject();
    if (!RBRK()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // QualIdent = Identifier (DOT Identifier)* ;
  //*********************************************************************
  function QualIdent()
  {
    if (saved(_QualIdent_)) return reuse();
    if (!Identifier()) return reject();
    while (ClassType_0()){ };
    return accept();
  }
  
  //*********************************************************************
  // CompilationUnit = BlockStatement* ;
  //*********************************************************************
  function CompilationUnit()
  {
    if (saved(_CompilationUnit_)) return reuse();
    while (BlockStatement()){ };
    return accept();
  }
  
  //*********************************************************************
  // MethodDeclaration = MethodHeader MethodBody ;
  //*********************************************************************
  function MethodDeclaration()
  {
    if (saved(_MethodDeclaration_)) return reuse();
    if (!MethodHeader()) return reject();
    if (!MethodBody()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // MethodHeader = FUNCTION MethodDeclarator (COLON Result)? ;
  //*********************************************************************
  function MethodHeader()
  {
    if (saved(_MethodHeader_)) return reuse();
    if (!FUNCTION()) return reject();
    if (!MethodDeclarator()) return reject();
    MethodHeader_0();
    return accept();
  }
  
  //-------------------------------------------------------------------
  // MethodHeader_0 = COLON Result
  //-------------------------------------------------------------------
  function MethodHeader_0()
  {
    if (savedInner(_MethodHeader_0_)) return reuseInner();
    if (!COLON()) return rejectInner();
    if (!Result()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // MethodDeclarator = Identifier LPAR FormalParameterList? RPAR ;
  //*********************************************************************
  function MethodDeclarator()
  {
    if (saved(_MethodDeclarator_)) return reuse();
    if (!Identifier()) return reject();
    if (!LPAR()) return reject();
    FormalParameterList();
    if (!RPAR()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // FormalParameterList = FormalParameter (COMMA FormalParameter)* ;
  //*********************************************************************
  function FormalParameterList()
  {
    if (saved(_FormalParameterList_)) return reuse();
    if (!FormalParameter()) return reject();
    while (FormalParameterList_0()){ };
    return accept();
  }
  
  //-------------------------------------------------------------------
  // FormalParameterList_0 = COMMA FormalParameter
  //-------------------------------------------------------------------
  function FormalParameterList_0()
  {
    if (savedInner(_FormalParameterList_0_)) return reuseInner();
    if (!COMMA()) return rejectInner();
    if (!FormalParameter()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // FormalParameter = Identifier COLON BasicType ;
  //*********************************************************************
  function FormalParameter()
  {
    if (saved(_FormalParameter_)) return reuse();
    if (!Identifier()) return reject();
    if (!COLON()) return reject();
    if (!BasicType()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // Result = VOID ;
  //*********************************************************************
  function Result()
  {
    if (saved(_Result_)) return reuse();
    if (!VOID()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // MethodBody = Block / SEMI ;
  //*********************************************************************
  function MethodBody()
  {
    if (saved(_MethodBody_)) return reuse();
    if (Block()) return accept();
    if (SEMI()) return accept();
    return reject();
  }
  
  //*********************************************************************
  // ArrayInitializer = LBRK VariableInitializerList? COMMA? RBRK ;
  //*********************************************************************
  function ArrayInitializer()
  {
    if (saved(_ArrayInitializer_)) return reuse();
    if (!LBRK()) return reject();
    VariableInitializerList();
    COMMA();
    if (!RBRK()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // VariableInitializerList = VariableInitializer (COMMA
  // VariableInitializer)* ;
  //*********************************************************************
  function VariableInitializerList()
  {
    if (saved(_VariableInitializerList_)) return reuse();
    if (!VariableInitializer()) return reject();
    while (VariableInitializerList_0()){ };
    return accept();
  }
  
  //-------------------------------------------------------------------
  // VariableInitializerList_0 = COMMA VariableInitializer
  //-------------------------------------------------------------------
  function VariableInitializerList_0()
  {
    if (savedInner(_VariableInitializerList_0_)) return reuseInner();
    if (!COMMA()) return rejectInner();
    if (!VariableInitializer()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // VariableInitializer = Expression / ArrayInitializer ;
  //*********************************************************************
  function VariableInitializer()
  {
    if (saved(_VariableInitializer_)) return reuse();
    if (Expression()) return accept();
    if (ArrayInitializer()) return accept();
    return reject();
  }
  
  //*********************************************************************
  // Block = LWING BlockStatements? RWING ;
  //*********************************************************************
  function Block()
  {
    if (saved(_Block_)) return reuse();
    if (!LWING()) return reject();
    BlockStatements();
    if (!RWING()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // BlockStatements = BlockStatement BlockStatement* ;
  //*********************************************************************
  function BlockStatements()
  {
    if (saved(_BlockStatements_)) return reuse();
    if (!BlockStatement()) return reject();
    while (BlockStatement()){ };
    return accept();
  }
  
  //*********************************************************************
  // BlockStatement = LocalVariableDeclarationStatement / Statement /
  // MethodInvocation / MethodDeclaration ;
  //*********************************************************************
  function BlockStatement()
  {
    if (saved(_BlockStatement_)) return reuse();
    if (LocalVariableDeclarationStatement()) return accept();
    if (Statement()) return accept();
    if (MethodInvocation()) return accept();
    if (MethodDeclaration()) return accept();
    return reject();
  }
  
  //*********************************************************************
  // LocalVariableDeclarationStatement = LocalVariableDeclaration SEMI
  // ;
  //*********************************************************************
  function LocalVariableDeclarationStatement()
  {
    if (saved(_LocalVariableDeclarationStatement_)) return reuse();
    if (!LocalVariableDeclaration()) return reject();
    if (!SEMI()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // LocalVariableDeclaration = VAR Identifier (COLON Type)? (EQU
  // Literal)? ;
  //*********************************************************************
  function LocalVariableDeclaration()
  {
    if (saved(_LocalVariableDeclaration_)) return reuse();
    if (!VAR()) return reject();
    if (!Identifier()) return reject();
    LocalVariableDeclaration_0();
    LocalVariableDeclaration_1();
    return accept();
  }
  
  //-------------------------------------------------------------------
  // LocalVariableDeclaration_0 = COLON Type
  //-------------------------------------------------------------------
  function LocalVariableDeclaration_0()
  {
    if (savedInner(_LocalVariableDeclaration_0_)) return reuseInner();
    if (!COLON()) return rejectInner();
    if (!Type()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // LocalVariableDeclaration_1 = EQU Literal
  //-------------------------------------------------------------------
  function LocalVariableDeclaration_1()
  {
    if (savedInner(_LocalVariableDeclaration_1_)) return reuseInner();
    if (!EQU()) return rejectInner();
    if (!Literal()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // Statement = Block / IF ParExpression Statement (ELSE Statement)? /
  // BasicForStatement / EnhancedForStatement / WHILE ParExpression
  // Statement / DO Statement WHILE ParExpression SEMI / TryStatement
  // / SWITCH ParExpression SwitchBlock / ParExpression Block / RETURN
  // Expression? SEMI / THROW Expression SEMI / BREAK Identifier? SEMI
  // / CONTINUE Identifier? SEMI / SEMI / StatementExpression SEMI /
  // Identifier COLON Statement ;
  //*********************************************************************
  function Statement()
  {
    if (saved(_Statement_)) return reuse();
    if (Block()) return accept();
    if (Statement_0()) return accept();
    if (BasicForStatement()) return accept();
    if (EnhancedForStatement()) return accept();
    if (Statement_1()) return accept();
    if (Statement_2()) return accept();
    if (TryStatement()) return accept();
    if (Statement_3()) return accept();
    if (Statement_4()) return accept();
    if (Statement_5()) return accept();
    if (Statement_6()) return accept();
    if (Statement_7()) return accept();
    if (Statement_8()) return accept();
    if (SEMI()) return accept();
    if (Statement_9()) return accept();
    if (Statement_10()) return accept();
    return reject();
  }
  
  //-------------------------------------------------------------------
  // Statement_0 = IF ParExpression Statement (ELSE Statement)?
  //-------------------------------------------------------------------
  function Statement_0()
  {
    if (savedInner(_Statement_0_)) return reuseInner();
    if (!IF()) return rejectInner();
    if (!ParExpression()) return rejectInner();
    if (!Statement()) return rejectInner();
    Statement_11();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // Statement_1 = WHILE ParExpression Statement
  //-------------------------------------------------------------------
  function Statement_1()
  {
    if (savedInner(_Statement_1_)) return reuseInner();
    if (!WHILE()) return rejectInner();
    if (!ParExpression()) return rejectInner();
    if (!Statement()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // Statement_2 = DO Statement WHILE ParExpression SEMI
  //-------------------------------------------------------------------
  function Statement_2()
  {
    if (savedInner(_Statement_2_)) return reuseInner();
    if (!DO()) return rejectInner();
    if (!Statement()) return rejectInner();
    if (!WHILE()) return rejectInner();
    if (!ParExpression()) return rejectInner();
    if (!SEMI()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // Statement_3 = SWITCH ParExpression SwitchBlock
  //-------------------------------------------------------------------
  function Statement_3()
  {
    if (savedInner(_Statement_3_)) return reuseInner();
    if (!SWITCH()) return rejectInner();
    if (!ParExpression()) return rejectInner();
    if (!SwitchBlock()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // Statement_4 = ParExpression Block
  //-------------------------------------------------------------------
  function Statement_4()
  {
    if (savedInner(_Statement_4_)) return reuseInner();
    if (!ParExpression()) return rejectInner();
    if (!Block()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // Statement_5 = RETURN Expression? SEMI
  //-------------------------------------------------------------------
  function Statement_5()
  {
    if (savedInner(_Statement_5_)) return reuseInner();
    if (!RETURN()) return rejectInner();
    Expression();
    if (!SEMI()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // Statement_6 = THROW Expression SEMI
  //-------------------------------------------------------------------
  function Statement_6()
  {
    if (savedInner(_Statement_6_)) return reuseInner();
    if (!THROW()) return rejectInner();
    if (!Expression()) return rejectInner();
    if (!SEMI()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // Statement_7 = BREAK Identifier? SEMI
  //-------------------------------------------------------------------
  function Statement_7()
  {
    if (savedInner(_Statement_7_)) return reuseInner();
    if (!BREAK()) return rejectInner();
    Identifier();
    if (!SEMI()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // Statement_8 = CONTINUE Identifier? SEMI
  //-------------------------------------------------------------------
  function Statement_8()
  {
    if (savedInner(_Statement_8_)) return reuseInner();
    if (!CONTINUE()) return rejectInner();
    Identifier();
    if (!SEMI()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // Statement_9 = StatementExpression SEMI
  //-------------------------------------------------------------------
  function Statement_9()
  {
    if (savedInner(_Statement_9_)) return reuseInner();
    if (!StatementExpression()) return rejectInner();
    if (!SEMI()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // Statement_10 = Identifier COLON Statement
  //-------------------------------------------------------------------
  function Statement_10()
  {
    if (savedInner(_Statement_10_)) return reuseInner();
    if (!Identifier()) return rejectInner();
    if (!COLON()) return rejectInner();
    if (!Statement()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // Statement_11 = ELSE Statement
  //-------------------------------------------------------------------
  function Statement_11()
  {
    if (savedInner(_Statement_11_)) return reuseInner();
    if (!ELSE()) return rejectInner();
    if (!Statement()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // StatementExpression = Assignment / (INC / DEC) (Primary /
  // QualIdent) / (Primary / QualIdent) (INC / DEC) / Primary ;
  //*********************************************************************
  function StatementExpression()
  {
    if (saved(_StatementExpression_)) return reuse();
    if (Assignment()) return accept();
    if (StatementExpression_0()) return accept();
    if (StatementExpression_1()) return accept();
    if (Primary()) return accept();
    return reject();
  }
  
  //-------------------------------------------------------------------
  // StatementExpression_0 = (INC / DEC) (Primary / QualIdent)
  //-------------------------------------------------------------------
  function StatementExpression_0()
  {
    if (savedInner(_StatementExpression_0_)) return reuseInner();
    if (!INC()
     && !DEC()
     ) return rejectInner();
    if (!Primary()
     && !QualIdent()
     ) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // StatementExpression_1 = (Primary / QualIdent) (INC / DEC)
  //-------------------------------------------------------------------
  function StatementExpression_1()
  {
    if (savedInner(_StatementExpression_1_)) return reuseInner();
    if (!Primary()
     && !QualIdent()
     ) return rejectInner();
    if (!INC()
     && !DEC()
     ) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // MethodInvocation = QualIdent Arguments ;
  //*********************************************************************
  function MethodInvocation()
  {
    if (saved(_MethodInvocation_)) return reuse();
    if (!QualIdent()) return reject();
    if (!Arguments()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // SwitchBlock = LWING SwitchBlockStatementGroup* SwitchLabel* RWING
  // ;
  //*********************************************************************
  function SwitchBlock()
  {
    if (saved(_SwitchBlock_)) return reuse();
    if (!LWING()) return reject();
    while (SwitchBlockStatementGroup()){ };
    while (SwitchLabel()){ };
    if (!RWING()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // SwitchBlockStatementGroup = SwitchLabels BlockStatements ;
  //*********************************************************************
  function SwitchBlockStatementGroup()
  {
    if (saved(_SwitchBlockStatementGroup_)) return reuse();
    if (!SwitchLabels()) return reject();
    if (!BlockStatements()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // SwitchLabels = SwitchLabel SwitchLabel* ;
  //*********************************************************************
  function SwitchLabels()
  {
    if (saved(_SwitchLabels_)) return reuse();
    if (!SwitchLabel()) return reject();
    while (SwitchLabel()){ };
    return accept();
  }
  
  //*********************************************************************
  // SwitchLabel = CASE LetterOrDigit COLON Statement / DEFAULT COLON
  // Statement ;
  //*********************************************************************
  function SwitchLabel()
  {
    if (saved(_SwitchLabel_)) return reuse();
    if (SwitchLabel_0()) return accept();
    if (SwitchLabel_1()) return accept();
    return reject();
  }
  
  //-------------------------------------------------------------------
  // SwitchLabel_0 = CASE LetterOrDigit COLON Statement
  //-------------------------------------------------------------------
  function SwitchLabel_0()
  {
    if (savedInner(_SwitchLabel_0_)) return reuseInner();
    if (!CASE()) return rejectInner();
    if (!LetterOrDigit()) return rejectInner();
    if (!COLON()) return rejectInner();
    if (!Statement()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // SwitchLabel_1 = DEFAULT COLON Statement
  //-------------------------------------------------------------------
  function SwitchLabel_1()
  {
    if (savedInner(_SwitchLabel_1_)) return reuseInner();
    if (!DEFAULT()) return rejectInner();
    if (!COLON()) return rejectInner();
    if (!Statement()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // BasicForStatement = FOR LPAR Identifier IN Expression RPAR
  // Statement ;
  //*********************************************************************
  function BasicForStatement()
  {
    if (saved(_BasicForStatement_)) return reuse();
    if (!FOR()) return reject();
    if (!LPAR()) return reject();
    if (!Identifier()) return reject();
    if (!IN()) return reject();
    if (!Expression()) return reject();
    if (!RPAR()) return reject();
    if (!Statement()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // EnhancedForStatement = FOR LPAR Identifier IN Digit* Spacing
  // ELLIPSIS Expression RPAR Statement ;
  //*********************************************************************
  function EnhancedForStatement()
  {
    if (saved(_EnhancedForStatement_)) return reuse();
    if (!FOR()) return reject();
    if (!LPAR()) return reject();
    if (!Identifier()) return reject();
    if (!IN()) return reject();
    while (Digit()){ };
    Spacing();
    if (!ELLIPSIS()) return reject();
    if (!Expression()) return reject();
    if (!RPAR()) return reject();
    if (!Statement()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // TryStatement = TRY (Block CatchClause*) ;
  //*********************************************************************
  function TryStatement()
  {
    if (saved(_TryStatement_)) return reuse();
    if (!TRY()) return reject();
    if (!Block()) return reject();
    while (CatchClause()){ };
    return accept();
  }
  
  //*********************************************************************
  // CatchClause = CATCH LPAR CatchFormalParameter RPAR Block ;
  //*********************************************************************
  function CatchClause()
  {
    if (saved(_CatchClause_)) return reuse();
    if (!CATCH()) return reject();
    if (!LPAR()) return reject();
    if (!CatchFormalParameter()) return reject();
    if (!RPAR()) return reject();
    if (!Block()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // CatchFormalParameter = BasicType ;
  //*********************************************************************
  function CatchFormalParameter()
  {
    if (saved(_CatchFormalParameter_)) return reuse();
    if (!BasicType()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // Expression = AssignmentExpression ;
  //*********************************************************************
  function Expression()
  {
    if (saved(_Expression_)) return reuse();
    if (!AssignmentExpression()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // Primary = PrimaryBase PrimaryRest* ;
  //*********************************************************************
  function Primary()
  {
    if (saved(_Primary_)) return reuse();
    if (!PrimaryBase()) return reject();
    while (PrimaryRest()){ };
    return accept();
  }
  
  //*********************************************************************
  // PrimaryBase = Literal / ParExpression / NEW ArrayCreator /
  // QualIdent (LBRK Expression RBRK / Arguments / DOT (Identifier
  // Arguments) / COLON Identifier) / ReferenceType COLON Identifier /
  // ArrayType COLON NEW ;
  //*********************************************************************
  function PrimaryBase()
  {
    if (saved(_PrimaryBase_)) return reuse();
    if (Literal()) return accept();
    if (ParExpression()) return accept();
    if (PrimaryBase_0()) return accept();
    if (PrimaryBase_1()) return accept();
    if (PrimaryBase_2()) return accept();
    if (PrimaryBase_3()) return accept();
    return reject();
  }
  
  //-------------------------------------------------------------------
  // PrimaryBase_0 = NEW ArrayCreator
  //-------------------------------------------------------------------
  function PrimaryBase_0()
  {
    if (savedInner(_PrimaryBase_0_)) return reuseInner();
    if (!NEW()) return rejectInner();
    if (!ArrayCreator()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // PrimaryBase_1 = QualIdent (LBRK Expression RBRK / Arguments / DOT
  // (Identifier Arguments) / COLON Identifier)
  //-------------------------------------------------------------------
  function PrimaryBase_1()
  {
    if (savedInner(_PrimaryBase_1_)) return reuseInner();
    if (!QualIdent()) return rejectInner();
    if (!PrimaryBase_4()
     && !Arguments()
     && !PrimaryBase_5()
     && !PrimaryBase_6()
     ) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // PrimaryBase_2 = ReferenceType COLON Identifier
  //-------------------------------------------------------------------
  function PrimaryBase_2()
  {
    if (savedInner(_PrimaryBase_2_)) return reuseInner();
    if (!ReferenceType()) return rejectInner();
    if (!COLON()) return rejectInner();
    if (!Identifier()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // PrimaryBase_3 = ArrayType COLON NEW
  //-------------------------------------------------------------------
  function PrimaryBase_3()
  {
    if (savedInner(_PrimaryBase_3_)) return reuseInner();
    if (!ArrayType()) return rejectInner();
    if (!COLON()) return rejectInner();
    if (!NEW()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // PrimaryBase_4 = LBRK Expression RBRK
  //-------------------------------------------------------------------
  function PrimaryBase_4()
  {
    if (savedInner(_PrimaryBase_4_)) return reuseInner();
    if (!LBRK()) return rejectInner();
    if (!Expression()) return rejectInner();
    if (!RBRK()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // PrimaryBase_5 = DOT (Identifier Arguments)
  //-------------------------------------------------------------------
  function PrimaryBase_5()
  {
    if (savedInner(_PrimaryBase_5_)) return reuseInner();
    if (!DOT()) return rejectInner();
    if (!Identifier()) return rejectInner();
    if (!Arguments()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // PrimaryBase_6 = COLON Identifier
  //-------------------------------------------------------------------
  function PrimaryBase_6()
  {
    if (savedInner(_PrimaryBase_6_)) return reuseInner();
    if (!COLON()) return rejectInner();
    if (!Identifier()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // PrimaryRest = DOT (Identifier Arguments / Identifier) / LBRK
  // Expression RBRK / COLON Identifier ;
  //*********************************************************************
  function PrimaryRest()
  {
    if (saved(_PrimaryRest_)) return reuse();
    if (PrimaryRest_0()) return accept();
    if (PrimaryBase_4()) return accept();
    if (PrimaryBase_6()) return accept();
    return reject();
  }
  
  //-------------------------------------------------------------------
  // PrimaryRest_0 = DOT (Identifier Arguments / Identifier)
  //-------------------------------------------------------------------
  function PrimaryRest_0()
  {
    if (savedInner(_PrimaryRest_0_)) return reuseInner();
    if (!DOT()) return rejectInner();
    if (!PrimaryRest_1()
     && !Identifier()
     ) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // PrimaryRest_1 = Identifier Arguments
  //-------------------------------------------------------------------
  function PrimaryRest_1()
  {
    if (savedInner(_PrimaryRest_1_)) return reuseInner();
    if (!Identifier()) return rejectInner();
    if (!Arguments()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // ParExpression = LPAR Expression RPAR ;
  //*********************************************************************
  function ParExpression()
  {
    if (saved(_ParExpression_)) return reuse();
    if (!LPAR()) return reject();
    if (!Expression()) return reject();
    if (!RPAR()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // ArrayCreator = ArrayType DimExpr+ Dim* / ArrayType EQU
  // ArrayInitializer ;
  //*********************************************************************
  function ArrayCreator()
  {
    if (saved(_ArrayCreator_)) return reuse();
    if (ArrayCreator_0()) return accept();
    if (ArrayCreator_1()) return accept();
    return reject();
  }
  
  //-------------------------------------------------------------------
  // ArrayCreator_0 = ArrayType DimExpr+ Dim*
  //-------------------------------------------------------------------
  function ArrayCreator_0()
  {
    if (savedInner(_ArrayCreator_0_)) return reuseInner();
    if (!ArrayType()) return rejectInner();
    if (!DimExpr()) return rejectInner();
    while (DimExpr()){ };
    while (Dim()){ };
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // ArrayCreator_1 = ArrayType EQU ArrayInitializer
  //-------------------------------------------------------------------
  function ArrayCreator_1()
  {
    if (savedInner(_ArrayCreator_1_)) return reuseInner();
    if (!ArrayType()) return rejectInner();
    if (!EQU()) return rejectInner();
    if (!ArrayInitializer()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // DimExpr = LBRK Expression RBRK ;
  //*********************************************************************
  function DimExpr()
  {
    if (saved(_DimExpr_)) return reuse();
    if (!LBRK()) return reject();
    if (!Expression()) return reject();
    if (!RBRK()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // Arguments = LPAR ArgumentList? RPAR ;
  //*********************************************************************
  function Arguments()
  {
    if (saved(_Arguments_)) return reuse();
    if (!LPAR()) return reject();
    ArgumentList();
    if (!RPAR()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // ArgumentList = Expression (COMMA Expression)* ;
  //*********************************************************************
  function ArgumentList()
  {
    if (saved(_ArgumentList_)) return reuse();
    if (!Expression()) return reject();
    while (ArgumentList_0()){ };
    return accept();
  }
  
  //-------------------------------------------------------------------
  // ArgumentList_0 = COMMA Expression
  //-------------------------------------------------------------------
  function ArgumentList_0()
  {
    if (savedInner(_ArgumentList_0_)) return reuseInner();
    if (!COMMA()) return rejectInner();
    if (!Expression()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // UnaryExpression = (INC / DEC) (Primary / QualIdent) / PLUS
  // UnaryExpression / MINUS UnaryExpression /
  // UnaryExpressionNotPlusMinus ;
  //*********************************************************************
  function UnaryExpression()
  {
    if (saved(_UnaryExpression_)) return reuse();
    if (StatementExpression_0()) return accept();
    if (UnaryExpression_0()) return accept();
    if (UnaryExpression_1()) return accept();
    if (UnaryExpressionNotPlusMinus()) return accept();
    return reject();
  }
  
  //-------------------------------------------------------------------
  // UnaryExpression_0 = PLUS UnaryExpression
  //-------------------------------------------------------------------
  function UnaryExpression_0()
  {
    if (savedInner(_UnaryExpression_0_)) return reuseInner();
    if (!PLUS()) return rejectInner();
    if (!UnaryExpression()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // UnaryExpression_1 = MINUS UnaryExpression
  //-------------------------------------------------------------------
  function UnaryExpression_1()
  {
    if (savedInner(_UnaryExpression_1_)) return reuseInner();
    if (!MINUS()) return rejectInner();
    if (!UnaryExpression()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // UnaryExpressionNotPlusMinus = BANG UnaryExpression / (Primary /
  // QualIdent) (INC / DEC)? ;
  //*********************************************************************
  function UnaryExpressionNotPlusMinus()
  {
    if (saved(_UnaryExpressionNotPlusMinus_)) return reuse();
    if (UnaryExpressionNotPlusMinus_0()) return accept();
    if (UnaryExpressionNotPlusMinus_1()) return accept();
    return reject();
  }
  
  //-------------------------------------------------------------------
  // UnaryExpressionNotPlusMinus_0 = BANG UnaryExpression
  //-------------------------------------------------------------------
  function UnaryExpressionNotPlusMinus_0()
  {
    if (savedInner(_UnaryExpressionNotPlusMinus_0_)) return reuseInner();
    if (!BANG()) return rejectInner();
    if (!UnaryExpression()) return rejectInner();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // UnaryExpressionNotPlusMinus_1 = (Primary / QualIdent) (INC /
  // DEC)?
  //-------------------------------------------------------------------
  function UnaryExpressionNotPlusMinus_1()
  {
    if (savedInner(_UnaryExpressionNotPlusMinus_1_)) return reuseInner();
    if (!Primary()
     && !QualIdent()
     ) return rejectInner();
    UnaryExpressionNotPlusMinus_2();
    return acceptInner();
  }
  
  //-------------------------------------------------------------------
  // UnaryExpressionNotPlusMinus_2 = INC / DEC
  //-------------------------------------------------------------------
  function UnaryExpressionNotPlusMinus_2()
  {
    if (savedInner(_UnaryExpressionNotPlusMinus_2_)) return reuseInner();
    if (INC()) return acceptInner();
    if (DEC()) return acceptInner();
    return rejectInner();
  }
  
  //*********************************************************************
  // InfixExpression = UnaryExpression (InfixOperator UnaryExpression)*
  // ;
  //*********************************************************************
  function InfixExpression()
  {
    if (saved(_InfixExpression_)) return reuse();
    if (!UnaryExpression()) return reject();
    while (InfixExpression_0()){ };
    return accept();
  }
  
  //-------------------------------------------------------------------
  // InfixExpression_0 = InfixOperator UnaryExpression
  //-------------------------------------------------------------------
  function InfixExpression_0()
  {
    if (savedInner(_InfixExpression_0_)) return reuseInner();
    if (!InfixOperator()) return rejectInner();
    if (!UnaryExpression()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // InfixOperator = OROR / ANDAND / OR / HAT / AND / EQUAL / NOTEQUAL /
  // LT / GT / LE / GE / SL / SR / PLUS / MINUS / STAR / DIV / MOD ;
  //*********************************************************************
  function InfixOperator()
  {
    if (saved(_InfixOperator_)) return reuse();
    if (OROR()) return accept();
    if (ANDAND()) return accept();
    if (OR()) return accept();
    if (HAT()) return accept();
    if (AND()) return accept();
    if (EQUAL()) return accept();
    if (NOTEQUAL()) return accept();
    if (LT()) return accept();
    if (GT()) return accept();
    if (LE()) return accept();
    if (GE()) return accept();
    if (SL()) return accept();
    if (SR()) return accept();
    if (PLUS()) return accept();
    if (MINUS()) return accept();
    if (STAR()) return accept();
    if (DIV()) return accept();
    if (MOD()) return accept();
    return reject();
  }
  
  //*********************************************************************
  // ConditionalExpression = InfixExpression (QUERY Expression COLON
  // Expression)* ;
  //*********************************************************************
  function ConditionalExpression()
  {
    if (saved(_ConditionalExpression_)) return reuse();
    if (!InfixExpression()) return reject();
    while (ConditionalExpression_0()){ };
    return accept();
  }
  
  //-------------------------------------------------------------------
  // ConditionalExpression_0 = QUERY Expression COLON Expression
  //-------------------------------------------------------------------
  function ConditionalExpression_0()
  {
    if (savedInner(_ConditionalExpression_0_)) return reuseInner();
    if (!QUERY()) return rejectInner();
    if (!Expression()) return rejectInner();
    if (!COLON()) return rejectInner();
    if (!Expression()) return rejectInner();
    return acceptInner();
  }
  
  //*********************************************************************
  // AssignmentExpression = Assignment / ConditionalExpression ;
  //*********************************************************************
  function AssignmentExpression()
  {
    if (saved(_AssignmentExpression_)) return reuse();
    if (Assignment()) return accept();
    if (ConditionalExpression()) return accept();
    return reject();
  }
  
  //*********************************************************************
  // Assignment = LeftHandSide AssignmentOperator Expression ;
  //*********************************************************************
  function Assignment()
  {
    if (saved(_Assignment_)) return reuse();
    if (!LeftHandSide()) return reject();
    if (!AssignmentOperator()) return reject();
    if (!Expression()) return reject();
    return accept();
  }
  
  //*********************************************************************
  // LeftHandSide = Primary / QualIdent ;
  //*********************************************************************
  function LeftHandSide()
  {
    if (saved(_LeftHandSide_)) return reuse();
    if (Primary()) return accept();
    if (QualIdent()) return accept();
    return reject();
  }
  
  //*********************************************************************
  // AssignmentOperator = EQU / STAREQU / DIVEQU / PLUSEQU / MINUSEQU /
  // ANDEQU / OREQU ;
  //*********************************************************************
  function AssignmentOperator()
  {
    if (saved(_AssignmentOperator_)) return reuse();
    if (EQU()) return accept();
    if (STAREQU()) return accept();
    if (DIVEQU()) return accept();
    if (PLUSEQU()) return accept();
    if (MINUSEQU()) return accept();
    if (ANDEQU()) return accept();
    if (OREQU()) return accept();
    return reject();
  }
  
  //**********************************************************************
  //
  // Cache objects
  //
  //**********************************************************************
  
  var _Compilation_:Cache;
  var _EOT_:Cache;
  var _Spacing_:Cache;
  var _Identifier_:Cache;
  var _Letter_:Cache;
  var _LetterOrDigit_:Cache;
  var _Digit_:Cache;
  var _Keyword_:Cache;
  var _FUNCTION_:Cache;
  var _VAR_:Cache;
  var _BOOL_:Cache;
  var _BREAK_:Cache;
  var _CASE_:Cache;
  var _CATCH_:Cache;
  var _CONTINUE_:Cache;
  var _DEFAULT_:Cache;
  var _DO_:Cache;
  var _ELSE_:Cache;
  var _FALSE_:Cache;
  var _FLOAT_:Cache;
  var _ARRAY_:Cache;
  var _FOR_:Cache;
  var _IN_:Cache;
  var _IF_:Cache;
  var _INT_:Cache;
  var _MAP_:Cache;
  var _NEW_:Cache;
  var _NULL_:Cache;
  var _RETURN_:Cache;
  var _SWITCH_:Cache;
  var _STRING_:Cache;
  var _THROW_:Cache;
  var _TRUE_:Cache;
  var _TRY_:Cache;
  var _VOID_:Cache;
  var _WHILE_:Cache;
  var _Literal_:Cache;
  var _IntegerLiteral_:Cache;
  var _DecimalNumeral_:Cache;
  var _HexNumeral_:Cache;
  var _OctalNumeral_:Cache;
  var _BinaryNumeral_:Cache;
  var _FloatLiteral_:Cache;
  var _DecimalFloatingPointLiteral_:Cache;
  var _Exponent_:Cache;
  var _HexadecimalFloatingPointLiteral_:Cache;
  var _HexSignificand_:Cache;
  var _HexDigits_:Cache;
  var _HexDigit_:Cache;
  var _BinaryExponent_:Cache;
  var _Digits_:Cache;
  var _BooleanLiteral_:Cache;
  var _CharLiteral_:Cache;
  var _StringLiteral_:Cache;
  var _Escape_:Cache;
  var _OctalEscape_:Cache;
  var _UnicodeEscape_:Cache;
  var _NullLiteral_:Cache;
  var _COLON_:Cache;
  var _COMMA_:Cache;
  var _DOT_:Cache;
  var _ELLIPSIS_:Cache;
  var _LPAR_:Cache;
  var _LBRK_:Cache;
  var _RBRK_:Cache;
  var _RPAR_:Cache;
  var _LWING_:Cache;
  var _RWING_:Cache;
  var _SEMI_:Cache;
  var _LT_:Cache;
  var _GT_:Cache;
  var _AND_:Cache;
  var _ANDAND_:Cache;
  var _ANDEQU_:Cache;
  var _BANG_:Cache;
  var _DEC_:Cache;
  var _DIV_:Cache;
  var _DIVEQU_:Cache;
  var _EQU_:Cache;
  var _EQUAL_:Cache;
  var _GE_:Cache;
  var _HAT_:Cache;
  var _INC_:Cache;
  var _LE_:Cache;
  var _MINUS_:Cache;
  var _MINUSEQU_:Cache;
  var _MOD_:Cache;
  var _NOTEQUAL_:Cache;
  var _OR_:Cache;
  var _OREQU_:Cache;
  var _OROR_:Cache;
  var _PLUS_:Cache;
  var _PLUSEQU_:Cache;
  var _QUERY_:Cache;
  var _SL_:Cache;
  var _SR_:Cache;
  var _STAR_:Cache;
  var _STAREQU_:Cache;
  var _BasicType_:Cache;
  var _ReferenceType_:Cache;
  var _Type_:Cache;
  var _ArrayType_:Cache;
  var _MapType_:Cache;
  var _ClassType_:Cache;
  var _TypeVariable_:Cache;
  var _Dim_:Cache;
  var _QualIdent_:Cache;
  var _CompilationUnit_:Cache;
  var _MethodDeclaration_:Cache;
  var _MethodHeader_:Cache;
  var _MethodDeclarator_:Cache;
  var _FormalParameterList_:Cache;
  var _FormalParameter_:Cache;
  var _Result_:Cache;
  var _MethodBody_:Cache;
  var _ArrayInitializer_:Cache;
  var _VariableInitializerList_:Cache;
  var _VariableInitializer_:Cache;
  var _Block_:Cache;
  var _BlockStatements_:Cache;
  var _BlockStatement_:Cache;
  var _LocalVariableDeclarationStatement_:Cache;
  var _LocalVariableDeclaration_:Cache;
  var _Statement_:Cache;
  var _StatementExpression_:Cache;
  var _MethodInvocation_:Cache;
  var _SwitchBlock_:Cache;
  var _SwitchBlockStatementGroup_:Cache;
  var _SwitchLabels_:Cache;
  var _SwitchLabel_:Cache;
  var _BasicForStatement_:Cache;
  var _EnhancedForStatement_:Cache;
  var _TryStatement_:Cache;
  var _CatchClause_:Cache;
  var _CatchFormalParameter_:Cache;
  var _Expression_:Cache;
  var _Primary_:Cache;
  var _PrimaryBase_:Cache;
  var _PrimaryRest_:Cache;
  var _ParExpression_:Cache;
  var _ArrayCreator_:Cache;
  var _DimExpr_:Cache;
  var _Arguments_:Cache;
  var _ArgumentList_:Cache;
  var _UnaryExpression_:Cache;
  var _UnaryExpressionNotPlusMinus_:Cache;
  var _InfixExpression_:Cache;
  var _InfixOperator_:Cache;
  var _ConditionalExpression_:Cache;
  var _AssignmentExpression_:Cache;
  var _Assignment_:Cache;
  var _LeftHandSide_:Cache;
  var _AssignmentOperator_:Cache;
  var _Spacing_0_:Cache;
  var _Spacing_1_:Cache;
  var _Spacing_2_:Cache;
  var _Spacing_3_:Cache;
  var _Identifier_0_:Cache;
  var _Keyword_0_:Cache;
  var _DecimalNumeral_0_:Cache;
  var _DecimalNumeral_1_:Cache;
  var _OctalNumeral_0_:Cache;
  var _BinaryNumeral_0_:Cache;
  var _DecimalFloatingPointLiteral_0_:Cache;
  var _DecimalFloatingPointLiteral_1_:Cache;
  var _DecimalFloatingPointLiteral_2_:Cache;
  var _DecimalFloatingPointLiteral_3_:Cache;
  var _HexSignificand_0_:Cache;
  var _HexSignificand_1_:Cache;
  var _HexDigits_0_:Cache;
  var _CharLiteral_0_:Cache;
  var _StringLiteral_0_:Cache;
  var _StringLiteral_1_:Cache;
  var _OctalEscape_0_:Cache;
  var _OctalEscape_1_:Cache;
  var _ClassType_0_:Cache;
  var _MethodHeader_0_:Cache;
  var _FormalParameterList_0_:Cache;
  var _VariableInitializerList_0_:Cache;
  var _LocalVariableDeclaration_0_:Cache;
  var _LocalVariableDeclaration_1_:Cache;
  var _Statement_0_:Cache;
  var _Statement_1_:Cache;
  var _Statement_2_:Cache;
  var _Statement_3_:Cache;
  var _Statement_4_:Cache;
  var _Statement_5_:Cache;
  var _Statement_6_:Cache;
  var _Statement_7_:Cache;
  var _Statement_8_:Cache;
  var _Statement_9_:Cache;
  var _Statement_10_:Cache;
  var _Statement_11_:Cache;
  var _StatementExpression_0_:Cache;
  var _StatementExpression_1_:Cache;
  var _SwitchLabel_0_:Cache;
  var _SwitchLabel_1_:Cache;
  var _PrimaryBase_0_:Cache;
  var _PrimaryBase_1_:Cache;
  var _PrimaryBase_2_:Cache;
  var _PrimaryBase_3_:Cache;
  var _PrimaryBase_4_:Cache;
  var _PrimaryBase_5_:Cache;
  var _PrimaryBase_6_:Cache;
  var _PrimaryRest_0_:Cache;
  var _PrimaryRest_1_:Cache;
  var _ArrayCreator_0_:Cache;
  var _ArrayCreator_1_:Cache;
  var _ArgumentList_0_:Cache;
  var _UnaryExpression_0_:Cache;
  var _UnaryExpression_1_:Cache;
  var _UnaryExpressionNotPlusMinus_0_:Cache;
  var _UnaryExpressionNotPlusMinus_1_:Cache;
  var _UnaryExpressionNotPlusMinus_2_:Cache;
  var _InfixExpression_0_:Cache;
  var _ConditionalExpression_0_:Cache;
  
  function initCache()
  {
    _Compilation_ = new Cache("Compilation","Compilation");
    _EOT_ = new Cache("EOT","EOT");
    _Spacing_ = new Cache("Spacing","Spacing");
    _Identifier_ = new Cache("Identifier","Identifier");
    _Letter_ = new Cache("Letter","Letter");
    _LetterOrDigit_ = new Cache("LetterOrDigit","LetterOrDigit");
    _Digit_ = new Cache("Digit","Digit");
    _Keyword_ = new Cache("Keyword","Keyword");
    _FUNCTION_ = new Cache("FUNCTION","FUNCTION");
    _VAR_ = new Cache("VAR","VAR");
    _BOOL_ = new Cache("BOOL","BOOL");
    _BREAK_ = new Cache("BREAK","BREAK");
    _CASE_ = new Cache("CASE","CASE");
    _CATCH_ = new Cache("CATCH","CATCH");
    _CONTINUE_ = new Cache("CONTINUE","CONTINUE");
    _DEFAULT_ = new Cache("DEFAULT","DEFAULT");
    _DO_ = new Cache("DO","DO");
    _ELSE_ = new Cache("ELSE","ELSE");
    _FALSE_ = new Cache("FALSE","FALSE");
    _FLOAT_ = new Cache("FLOAT","FLOAT");
    _ARRAY_ = new Cache("ARRAY","ARRAY");
    _FOR_ = new Cache("FOR","FOR");
    _IN_ = new Cache("IN","IN");
    _IF_ = new Cache("IF","IF");
    _INT_ = new Cache("INT","INT");
    _MAP_ = new Cache("MAP","MAP");
    _NEW_ = new Cache("NEW","NEW");
    _NULL_ = new Cache("NULL","NULL");
    _RETURN_ = new Cache("RETURN","RETURN");
    _SWITCH_ = new Cache("SWITCH","SWITCH");
    _STRING_ = new Cache("STRING","STRING");
    _THROW_ = new Cache("THROW","THROW");
    _TRUE_ = new Cache("TRUE","TRUE");
    _TRY_ = new Cache("TRY","TRY");
    _VOID_ = new Cache("VOID","VOID");
    _WHILE_ = new Cache("WHILE","WHILE");
    _Literal_ = new Cache("Literal","Literal");
    _IntegerLiteral_ = new Cache("IntegerLiteral","IntegerLiteral");
    _DecimalNumeral_ = new Cache("DecimalNumeral","DecimalNumeral");
    _HexNumeral_ = new Cache("HexNumeral","HexNumeral");
    _OctalNumeral_ = new Cache("OctalNumeral","OctalNumeral");
    _BinaryNumeral_ = new Cache("BinaryNumeral","BinaryNumeral");
    _FloatLiteral_ = new Cache("FloatLiteral","FloatLiteral");
    _DecimalFloatingPointLiteral_ = new Cache("DecimalFloatingPointLiteral","DecimalFloatingPointLiteral");
    _Exponent_ = new Cache("Exponent","Exponent");
    _HexadecimalFloatingPointLiteral_ = new Cache("HexadecimalFloatingPointLiteral","HexadecimalFloatingPointLiteral");
    _HexSignificand_ = new Cache("HexSignificand","HexSignificand");
    _HexDigits_ = new Cache("HexDigits","HexDigits");
    _HexDigit_ = new Cache("HexDigit","HexDigit");
    _BinaryExponent_ = new Cache("BinaryExponent","BinaryExponent");
    _Digits_ = new Cache("Digits","Digits");
    _BooleanLiteral_ = new Cache("BooleanLiteral","BooleanLiteral");
    _CharLiteral_ = new Cache("CharLiteral","CharLiteral");
    _StringLiteral_ = new Cache("StringLiteral","StringLiteral");
    _Escape_ = new Cache("Escape","Escape");
    _OctalEscape_ = new Cache("OctalEscape","OctalEscape");
    _UnicodeEscape_ = new Cache("UnicodeEscape","UnicodeEscape");
    _NullLiteral_ = new Cache("NullLiteral","NullLiteral");
    _COLON_ = new Cache("COLON","COLON");
    _COMMA_ = new Cache("COMMA","COMMA");
    _DOT_ = new Cache("DOT","DOT");
    _ELLIPSIS_ = new Cache("ELLIPSIS","ELLIPSIS");
    _LPAR_ = new Cache("LPAR","LPAR");
    _LBRK_ = new Cache("LBRK","LBRK");
    _RBRK_ = new Cache("RBRK","RBRK");
    _RPAR_ = new Cache("RPAR","RPAR");
    _LWING_ = new Cache("LWING","LWING");
    _RWING_ = new Cache("RWING","RWING");
    _SEMI_ = new Cache("SEMI","SEMI");
    _LT_ = new Cache("LT","LT");
    _GT_ = new Cache("GT","GT");
    _AND_ = new Cache("AND","AND");
    _ANDAND_ = new Cache("ANDAND","ANDAND");
    _ANDEQU_ = new Cache("ANDEQU","ANDEQU");
    _BANG_ = new Cache("BANG","BANG");
    _DEC_ = new Cache("DEC","DEC");
    _DIV_ = new Cache("DIV","DIV");
    _DIVEQU_ = new Cache("DIVEQU","DIVEQU");
    _EQU_ = new Cache("EQU","EQU");
    _EQUAL_ = new Cache("EQUAL","EQUAL");
    _GE_ = new Cache("GE","GE");
    _HAT_ = new Cache("HAT","HAT");
    _INC_ = new Cache("INC","INC");
    _LE_ = new Cache("LE","LE");
    _MINUS_ = new Cache("MINUS","MINUS");
    _MINUSEQU_ = new Cache("MINUSEQU","MINUSEQU");
    _MOD_ = new Cache("MOD","MOD");
    _NOTEQUAL_ = new Cache("NOTEQUAL","NOTEQUAL");
    _OR_ = new Cache("OR","OR");
    _OREQU_ = new Cache("OREQU","OREQU");
    _OROR_ = new Cache("OROR","OROR");
    _PLUS_ = new Cache("PLUS","PLUS");
    _PLUSEQU_ = new Cache("PLUSEQU","PLUSEQU");
    _QUERY_ = new Cache("QUERY","QUERY");
    _SL_ = new Cache("SL","SL");
    _SR_ = new Cache("SR","SR");
    _STAR_ = new Cache("STAR","STAR");
    _STAREQU_ = new Cache("STAREQU","STAREQU");
    _BasicType_ = new Cache("BasicType","BasicType");
    _ReferenceType_ = new Cache("ReferenceType","ReferenceType");
    _Type_ = new Cache("Type","Type");
    _ArrayType_ = new Cache("ArrayType","ArrayType");
    _MapType_ = new Cache("MapType","MapType");
    _ClassType_ = new Cache("ClassType","ClassType");
    _TypeVariable_ = new Cache("TypeVariable","TypeVariable");
    _Dim_ = new Cache("Dim","Dim");
    _QualIdent_ = new Cache("QualIdent","QualIdent");
    _CompilationUnit_ = new Cache("CompilationUnit","CompilationUnit");
    _MethodDeclaration_ = new Cache("MethodDeclaration","MethodDeclaration");
    _MethodHeader_ = new Cache("MethodHeader","MethodHeader");
    _MethodDeclarator_ = new Cache("MethodDeclarator","MethodDeclarator");
    _FormalParameterList_ = new Cache("FormalParameterList","FormalParameterList");
    _FormalParameter_ = new Cache("FormalParameter","FormalParameter");
    _Result_ = new Cache("Result","Result");
    _MethodBody_ = new Cache("MethodBody","MethodBody");
    _ArrayInitializer_ = new Cache("ArrayInitializer","ArrayInitializer");
    _VariableInitializerList_ = new Cache("VariableInitializerList","VariableInitializerList");
    _VariableInitializer_ = new Cache("VariableInitializer","VariableInitializer");
    _Block_ = new Cache("Block","Block");
    _BlockStatements_ = new Cache("BlockStatements","BlockStatements");
    _BlockStatement_ = new Cache("BlockStatement","BlockStatement");
    _LocalVariableDeclarationStatement_ = new Cache("LocalVariableDeclarationStatement","LocalVariableDeclarationStatement");
    _LocalVariableDeclaration_ = new Cache("LocalVariableDeclaration","LocalVariableDeclaration");
    _Statement_ = new Cache("Statement","Statement");
    _StatementExpression_ = new Cache("StatementExpression","StatementExpression");
    _MethodInvocation_ = new Cache("MethodInvocation","MethodInvocation");
    _SwitchBlock_ = new Cache("SwitchBlock","SwitchBlock");
    _SwitchBlockStatementGroup_ = new Cache("SwitchBlockStatementGroup","SwitchBlockStatementGroup");
    _SwitchLabels_ = new Cache("SwitchLabels","SwitchLabels");
    _SwitchLabel_ = new Cache("SwitchLabel","SwitchLabel");
    _BasicForStatement_ = new Cache("BasicForStatement","BasicForStatement");
    _EnhancedForStatement_ = new Cache("EnhancedForStatement","EnhancedForStatement");
    _TryStatement_ = new Cache("TryStatement","TryStatement");
    _CatchClause_ = new Cache("CatchClause","CatchClause");
    _CatchFormalParameter_ = new Cache("CatchFormalParameter","CatchFormalParameter");
    _Expression_ = new Cache("Expression","Expression");
    _Primary_ = new Cache("Primary","Primary");
    _PrimaryBase_ = new Cache("PrimaryBase","PrimaryBase");
    _PrimaryRest_ = new Cache("PrimaryRest","PrimaryRest");
    _ParExpression_ = new Cache("ParExpression","ParExpression");
    _ArrayCreator_ = new Cache("ArrayCreator","ArrayCreator");
    _DimExpr_ = new Cache("DimExpr","DimExpr");
    _Arguments_ = new Cache("Arguments","Arguments");
    _ArgumentList_ = new Cache("ArgumentList","ArgumentList");
    _UnaryExpression_ = new Cache("UnaryExpression","UnaryExpression");
    _UnaryExpressionNotPlusMinus_ = new Cache("UnaryExpressionNotPlusMinus","UnaryExpressionNotPlusMinus");
    _InfixExpression_ = new Cache("InfixExpression","InfixExpression");
    _InfixOperator_ = new Cache("InfixOperator","InfixOperator");
    _ConditionalExpression_ = new Cache("ConditionalExpression","ConditionalExpression");
    _AssignmentExpression_ = new Cache("AssignmentExpression","AssignmentExpression");
    _Assignment_ = new Cache("Assignment","Assignment");
    _LeftHandSide_ = new Cache("LeftHandSide","LeftHandSide");
    _AssignmentOperator_ = new Cache("AssignmentOperator","AssignmentOperator");
    
    _Spacing_0_ = new Cache("Spacing_0"); // [ \t\r\n0]+ / "/*" _*+ "*/" / "//" _*+ [\r\n]
    _Spacing_1_ = new Cache("Spacing_1"); // [ \t\r\n0]+
    _Spacing_2_ = new Cache("Spacing_2"); // "/*" _*+ "*/"
    _Spacing_3_ = new Cache("Spacing_3"); // "//" _*+ [\r\n]
    _Identifier_0_ = new Cache("Identifier_0","not Keyword"); // !Keyword
    _Keyword_0_ = new Cache("Keyword_0","not LetterOrDigit"); // !LetterOrDigit
    _DecimalNumeral_0_ = new Cache("DecimalNumeral_0"); // [1-9] ([_]* [0-9])*
    _DecimalNumeral_1_ = new Cache("DecimalNumeral_1"); // [_]* [0-9]
    _OctalNumeral_0_ = new Cache("OctalNumeral_0"); // [_]* [0-7]
    _BinaryNumeral_0_ = new Cache("BinaryNumeral_0"); // [_]* [01]
    _DecimalFloatingPointLiteral_0_ = new Cache("DecimalFloatingPointLiteral_0"); // Digits "." Digits? Exponent? [fFdD]?
    _DecimalFloatingPointLiteral_1_ = new Cache("DecimalFloatingPointLiteral_1"); // "." Digits Exponent? [fFdD]?
    _DecimalFloatingPointLiteral_2_ = new Cache("DecimalFloatingPointLiteral_2"); // Digits Exponent [fFdD]?
    _DecimalFloatingPointLiteral_3_ = new Cache("DecimalFloatingPointLiteral_3"); // Digits Exponent? [fFdD]
    _HexSignificand_0_ = new Cache("HexSignificand_0"); // ("0x" / "0X") HexDigits? "." HexDigits
    _HexSignificand_1_ = new Cache("HexSignificand_1"); // HexNumeral "."?
    _HexDigits_0_ = new Cache("HexDigits_0"); // [_]* HexDigit
    _CharLiteral_0_ = new Cache("CharLiteral_0"); // !['\\n\r] _
    _StringLiteral_0_ = new Cache("StringLiteral_0"); // Escape / !["\\n\r] _
    _StringLiteral_1_ = new Cache("StringLiteral_1"); // !["\\n\r] _
    _OctalEscape_0_ = new Cache("OctalEscape_0"); // [0-3] [0-7] [0-7]
    _OctalEscape_1_ = new Cache("OctalEscape_1"); // [0-7] [0-7]
    _ClassType_0_ = new Cache("ClassType_0"); // DOT Identifier
    _MethodHeader_0_ = new Cache("MethodHeader_0"); // COLON Result
    _FormalParameterList_0_ = new Cache("FormalParameterList_0"); // COMMA FormalParameter
    _VariableInitializerList_0_ = new Cache("VariableInitializerList_0"); // COMMA VariableInitializer
    _LocalVariableDeclaration_0_ = new Cache("LocalVariableDeclaration_0"); // COLON Type
    _LocalVariableDeclaration_1_ = new Cache("LocalVariableDeclaration_1"); // EQU Literal
    _Statement_0_ = new Cache("Statement_0"); // IF ParExpression Statement (ELSE Statement)?
    _Statement_1_ = new Cache("Statement_1"); // WHILE ParExpression Statement
    _Statement_2_ = new Cache("Statement_2"); // DO Statement WHILE ParExpression SEMI
    _Statement_3_ = new Cache("Statement_3"); // SWITCH ParExpression SwitchBlock
    _Statement_4_ = new Cache("Statement_4"); // ParExpression Block
    _Statement_5_ = new Cache("Statement_5"); // RETURN Expression? SEMI
    _Statement_6_ = new Cache("Statement_6"); // THROW Expression SEMI
    _Statement_7_ = new Cache("Statement_7"); // BREAK Identifier? SEMI
    _Statement_8_ = new Cache("Statement_8"); // CONTINUE Identifier? SEMI
    _Statement_9_ = new Cache("Statement_9"); // StatementExpression SEMI
    _Statement_10_ = new Cache("Statement_10"); // Identifier COLON Statement
    _Statement_11_ = new Cache("Statement_11"); // ELSE Statement
    _StatementExpression_0_ = new Cache("StatementExpression_0"); // (INC / DEC) (Primary / QualIdent)
    _StatementExpression_1_ = new Cache("StatementExpression_1"); // (Primary / QualIdent) (INC / DEC)
    _SwitchLabel_0_ = new Cache("SwitchLabel_0"); // CASE LetterOrDigit COLON Statement
    _SwitchLabel_1_ = new Cache("SwitchLabel_1"); // DEFAULT COLON Statement
    _PrimaryBase_0_ = new Cache("PrimaryBase_0"); // NEW ArrayCreator
    _PrimaryBase_1_ = new Cache("PrimaryBase_1"); // QualIdent (LBRK Expression RBRK / Arguments / DOT (Identifier Arguments) / COLON Identifier)
    _PrimaryBase_2_ = new Cache("PrimaryBase_2"); // ReferenceType COLON Identifier
    _PrimaryBase_3_ = new Cache("PrimaryBase_3"); // ArrayType COLON NEW
    _PrimaryBase_4_ = new Cache("PrimaryBase_4"); // LBRK Expression RBRK
    _PrimaryBase_5_ = new Cache("PrimaryBase_5"); // DOT (Identifier Arguments)
    _PrimaryBase_6_ = new Cache("PrimaryBase_6"); // COLON Identifier
    _PrimaryRest_0_ = new Cache("PrimaryRest_0"); // DOT (Identifier Arguments / Identifier)
    _PrimaryRest_1_ = new Cache("PrimaryRest_1"); // Identifier Arguments
    _ArrayCreator_0_ = new Cache("ArrayCreator_0"); // ArrayType DimExpr+ Dim*
    _ArrayCreator_1_ = new Cache("ArrayCreator_1"); // ArrayType EQU ArrayInitializer
    _ArgumentList_0_ = new Cache("ArgumentList_0"); // COMMA Expression
    _UnaryExpression_0_ = new Cache("UnaryExpression_0"); // PLUS UnaryExpression
    _UnaryExpression_1_ = new Cache("UnaryExpression_1"); // MINUS UnaryExpression
    _UnaryExpressionNotPlusMinus_0_ = new Cache("UnaryExpressionNotPlusMinus_0"); // BANG UnaryExpression
    _UnaryExpressionNotPlusMinus_1_ = new Cache("UnaryExpressionNotPlusMinus_1"); // (Primary / QualIdent) (INC / DEC)?
    _UnaryExpressionNotPlusMinus_2_ = new Cache("UnaryExpressionNotPlusMinus_2"); // INC / DEC
    _InfixExpression_0_ = new Cache("InfixExpression_0"); // InfixOperator UnaryExpression
    _ConditionalExpression_0_ = new Cache("ConditionalExpression_0"); // QUERY Expression COLON Expression
    
    caches = [
      _Compilation_,
      _EOT_,
      _Spacing_,
      _Identifier_,
      _Letter_,
      _LetterOrDigit_,
      _Digit_,
      _Keyword_,
      _FUNCTION_,
      _VAR_,
      _BOOL_,
      _BREAK_,
      _CASE_,
      _CATCH_,
      _CONTINUE_,
      _DEFAULT_,
      _DO_,
      _ELSE_,
      _FALSE_,
      _FLOAT_,
      _ARRAY_,
      _FOR_,
      _IN_,
      _IF_,
      _INT_,
      _MAP_,
      _NEW_,
      _NULL_,
      _RETURN_,
      _SWITCH_,
      _STRING_,
      _THROW_,
      _TRUE_,
      _TRY_,
      _VOID_,
      _WHILE_,
      _Literal_,
      _IntegerLiteral_,
      _DecimalNumeral_,
      _HexNumeral_,
      _OctalNumeral_,
      _BinaryNumeral_,
      _FloatLiteral_,
      _DecimalFloatingPointLiteral_,
      _Exponent_,
      _HexadecimalFloatingPointLiteral_,
      _HexSignificand_,
      _HexDigits_,
      _HexDigit_,
      _BinaryExponent_,
      _Digits_,
      _BooleanLiteral_,
      _CharLiteral_,
      _StringLiteral_,
      _Escape_,
      _OctalEscape_,
      _UnicodeEscape_,
      _NullLiteral_,
      _COLON_,
      _COMMA_,
      _DOT_,
      _ELLIPSIS_,
      _LPAR_,
      _LBRK_,
      _RBRK_,
      _RPAR_,
      _LWING_,
      _RWING_,
      _SEMI_,
      _LT_,
      _GT_,
      _AND_,
      _ANDAND_,
      _ANDEQU_,
      _BANG_,
      _DEC_,
      _DIV_,
      _DIVEQU_,
      _EQU_,
      _EQUAL_,
      _GE_,
      _HAT_,
      _INC_,
      _LE_,
      _MINUS_,
      _MINUSEQU_,
      _MOD_,
      _NOTEQUAL_,
      _OR_,
      _OREQU_,
      _OROR_,
      _PLUS_,
      _PLUSEQU_,
      _QUERY_,
      _SL_,
      _SR_,
      _STAR_,
      _STAREQU_,
      _BasicType_,
      _ReferenceType_,
      _Type_,
      _ArrayType_,
      _MapType_,
      _ClassType_,
      _TypeVariable_,
      _Dim_,
      _QualIdent_,
      _CompilationUnit_,
      _MethodDeclaration_,
      _MethodHeader_,
      _MethodDeclarator_,
      _FormalParameterList_,
      _FormalParameter_,
      _Result_,
      _MethodBody_,
      _ArrayInitializer_,
      _VariableInitializerList_,
      _VariableInitializer_,
      _Block_,
      _BlockStatements_,
      _BlockStatement_,
      _LocalVariableDeclarationStatement_,
      _LocalVariableDeclaration_,
      _Statement_,
      _StatementExpression_,
      _MethodInvocation_,
      _SwitchBlock_,
      _SwitchBlockStatementGroup_,
      _SwitchLabels_,
      _SwitchLabel_,
      _BasicForStatement_,
      _EnhancedForStatement_,
      _TryStatement_,
      _CatchClause_,
      _CatchFormalParameter_,
      _Expression_,
      _Primary_,
      _PrimaryBase_,
      _PrimaryRest_,
      _ParExpression_,
      _ArrayCreator_,
      _DimExpr_,
      _Arguments_,
      _ArgumentList_,
      _UnaryExpression_,
      _UnaryExpressionNotPlusMinus_,
      _InfixExpression_,
      _InfixOperator_,
      _ConditionalExpression_,
      _AssignmentExpression_,
      _Assignment_,
      _LeftHandSide_,
      _AssignmentOperator_,
      _Spacing_0_,
      _Spacing_1_,
      _Spacing_2_,
      _Spacing_3_,
      _Identifier_0_,
      _Keyword_0_,
      _DecimalNumeral_0_,
      _DecimalNumeral_1_,
      _OctalNumeral_0_,
      _BinaryNumeral_0_,
      _DecimalFloatingPointLiteral_0_,
      _DecimalFloatingPointLiteral_1_,
      _DecimalFloatingPointLiteral_2_,
      _DecimalFloatingPointLiteral_3_,
      _HexSignificand_0_,
      _HexSignificand_1_,
      _HexDigits_0_,
      _CharLiteral_0_,
      _StringLiteral_0_,
      _StringLiteral_1_,
      _OctalEscape_0_,
      _OctalEscape_1_,
      _ClassType_0_,
      _MethodHeader_0_,
      _FormalParameterList_0_,
      _VariableInitializerList_0_,
      _LocalVariableDeclaration_0_,
      _LocalVariableDeclaration_1_,
      _Statement_0_,
      _Statement_1_,
      _Statement_2_,
      _Statement_3_,
      _Statement_4_,
      _Statement_5_,
      _Statement_6_,
      _Statement_7_,
      _Statement_8_,
      _Statement_9_,
      _Statement_10_,
      _Statement_11_,
      _StatementExpression_0_,
      _StatementExpression_1_,
      _SwitchLabel_0_,
      _SwitchLabel_1_,
      _PrimaryBase_0_,
      _PrimaryBase_1_,
      _PrimaryBase_2_,
      _PrimaryBase_3_,
      _PrimaryBase_4_,
      _PrimaryBase_5_,
      _PrimaryBase_6_,
      _PrimaryRest_0_,
      _PrimaryRest_1_,
      _ArrayCreator_0_,
      _ArrayCreator_1_,
      _ArgumentList_0_,
      _UnaryExpression_0_,
      _UnaryExpression_1_,
      _UnaryExpressionNotPlusMinus_0_,
      _UnaryExpressionNotPlusMinus_1_,
      _UnaryExpressionNotPlusMinus_2_,
      _InfixExpression_0_,
      _ConditionalExpression_0_,
    ];
  };
}
